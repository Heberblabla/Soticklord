package Data

import com.waos.soticklord.R
import java.io.Serializable
import kotlin.math.ceil
import kotlin.random.Random

class Tropa_Espadachin(Nivel:Int = 1) : Tropa(
    nombre = "Espadachin",
    nivel = Nivel,
    vida = calcularVida(420,Nivel),
    ataque_base = calcularAtaque(50,Nivel),
    da침o_critico = calcularDa침oCritico(1.8,Nivel),
    probabilidad_de_critico = calcularProbCritico(0.45,Nivel),
    aereo = false,
    estado_de_vida = true,
    rutaviva = R.drawable.espadachin_tropa,
    rutamuerta = R.drawable.tropa_muerta,
    turnoActivo = true,
    turnoDoble = false
), Serializable {
    override fun toString(): String {
        return """
            Nombre: $nombre
            Nivel: $nivel
            Vida: $vida
            Ataque base: $ataque_base
            Da침o cr칤tico: $da침o_critico
            Prob. cr칤tico: $probabilidad_de_critico
            A칠reo: $aereo
            Estado vida: $estado_de_vida
            Turno activo: $turnoActivo
            Turno doble: $turnoDoble
        """.trimIndent()
    }

    // 游댳 Dato 칰nico de esta tropa
    var vidavida: Int = 420

    private fun da침o(): Int {
        val suerte = Random.nextDouble()
        return if (suerte < probabilidad_de_critico) {
            ceil(ataque_base * da침o_critico).toInt()
        } else {
            ataque_base
        }
    }

    fun ataqueNormal(enemigos: ArrayList<Tropa>, posicion: Int) {
        val da침o = da침o()
        enemigos[posicion].vida -= da침o
    }

    fun contraataque(enemigos: ArrayList<Tropa>, posicion: Int) {
        val da침o = da침o()
        val contraataque = ((vidavida - vida) / 2) + da침o
        enemigos[posicion].vida -= contraataque
    }

    fun estocadaVeloz(enemigos: ArrayList<Tropa>, posicion: Int) {
        vida -= 60
        val da침oTotal = da침o() * 2
        enemigos[posicion].vida -= da침oTotal
    }
}
